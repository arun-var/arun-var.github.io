<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts...</title>
    <description>My Posts</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 15 Nov 2019 12:53:57 +0530</pubDate>
    <lastBuildDate>Fri, 15 Nov 2019 12:53:57 +0530</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>How to write safe shell scripts</title>
        <description>&lt;h4 id=&quot;shebang-&quot;&gt;Shebang (#!)&lt;/h4&gt;

&lt;p&gt;It is called a shebang or a “bang” line. It is nothing but the absolute path to the Bash interpreter. It consists of a number sign and an exclamation point character (#!), followed by the full path to the interpreter such as /bin/bash. All scripts under Linux execute using the interpreter specified on a first line.
This ensures that Bash will be used to interpret the script, even if it is executed under another shell.&lt;/p&gt;

&lt;h4 id=&quot;set--e&quot;&gt;set -e&lt;/h4&gt;

&lt;p&gt;this will make the shell script exit as soon as any line in the bash script fails.
for example, a shell file like below will execute every line
&lt;script src=&quot;https://gist.github.com/501d903a4db01b5bcbf4e59e7ecae7c2.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arun@home:~$ ./set_e_without.sh 
true
true
false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After adding set -e, it will stop executing after the line that fails, in this case the one that returns false.
&lt;script src=&quot;https://gist.github.com/9d841d3cc79224faf16f8fc602799372.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arun@home:~$ ./with_set_e.sh 
true
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if we don’t want the script to fail after certain failing statements, we can append these certain statements with || true.
&lt;script src=&quot;https://gist.github.com/1531d5db9b2bd6f0b3aa98c7d73cd044.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arun@home:~$ ./with_set_e_and_ignore_fail.sh           
true
true
failing foo was ignored
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;set--x&quot;&gt;set -x&lt;/h4&gt;

&lt;p&gt;this will make the shell print each line before execution. Combining this with previous set statement and same example, it will look like
&lt;script src=&quot;https://gist.github.com/a9c92e43f02fd4c65514bb63fb05dce4.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arun@home:~$ ./with_set_x.sh           
++ true
++ echo true
true
++ true
++ echo true
true
++ false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;set--u&quot;&gt;set -u&lt;/h4&gt;

&lt;p&gt;this option will force bash to treat unset variables as an error and exit immediately.
&lt;script src=&quot;https://gist.github.com/a9b2414088f39537cbd6e168e9e716f6.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arun@home:~$ ./without_set_u.sh 
++ a=0
++ echo 0
0
++ echo 0
0
++ echo

++ echo 0
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script src=&quot;https://gist.github.com/ca24e436660a986cbd58d9b22f113ce2.js&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arun@home:~$ ./with_set_u.sh 
++ a=0
++ echo 0
0
++ echo 0
0
./with_set_u.sh: line 5: b: unbound variable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;set--o-pipefail&quot;&gt;set -o pipefail&lt;/h4&gt;

&lt;p&gt;bash usually looks at the exit code of the last command in a pipeline. This can cause a problem for -e option as it will only consider the leftmost command’s exit code in a pipeline.
This particular option sets the exit code of pipeline commands to that of the rightmost command to exit with a non-zero status or 0 if all exit successfully.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/5df45b0e6c32925c6ffd927c77b16900.js&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arun@home:~$ ./without_pipefail.sh 
./test.sh: line 3: a: unbound variable
++ echo 'pipe chain failed'
pipe chain failed
++ echo 'but I execute'
but I execute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script src=&quot;https://gist.github.com/c3016ad398b86686d737f042298aac80.js&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arunvarghese@kreatio:~$ ./with_pipefail.sh 
./test.sh: line 3: a: unbound variable
++ echo 'pipe chain failed'
pipe chain failed

arun@home:~$ echo $?
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the echo $? is a special variable in bash that shows the exit code of last run command.&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Nov 2019 21:22:57 +0530</pubDate>
        <link>http://localhost:4000/shell/2019/11/13/write-safe-shell-scripts.html</link>
        <guid isPermaLink="true">http://localhost:4000/shell/2019/11/13/write-safe-shell-scripts.html</guid>
        
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>How to remove file in linux using regex</title>
        <description>&lt;h4 id=&quot;deleting-older-files-with-names-usually-having-date-as-prefixsuffix&quot;&gt;Deleting older files with names usually having date as prefix/suffix&lt;/h4&gt;

&lt;p&gt;Generally compressed log files created by utilities contain a date in the filename.
For cleaning such accumulated compressed files we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; command with regex.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls

2013-12-23-nginx.tar.gz                2016-04-29-nginx.tar.gz
2013-12-24-nginx.tar.gz                2016-05-21-nginx.tar.gz
2016-04-19-nginx.tar.gz                2016-05-22-nginx.tar.gz
2016-04-20-nginx.tar.gz                2016-05-23-nginx.tar.gz
2016-04-21-nginx.tar.gz                2016-05-24-nginx.tar.gz
2016-04-22-nginx.tar.gz                2016-05-25-nginx.tar.gz
2016-04-23-nginx.tar.gz                2016-06-11-nginx.tar.gz
2016-04-24-nginx.tar.gz                2016-06-12-nginx.tar.gz
2016-04-25-nginx.tar.gz                2016-06-13-nginx.tar.gz
2016-04-26-nginx.tar.gz                2016-12-24-nginx.tar.gz
2016-04-27-nginx.tar.gz                2019-07-20-nginx.tar.gz
2016-04-28-nginx.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rm 201[3-6]*&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2019 04:50:00 +0530</pubDate>
        <link>http://localhost:4000/linux/remove/delete/files/rm/regex/2019/07/20/how-to-remove-files-using-regex.html</link>
        <guid isPermaLink="true">http://localhost:4000/linux/remove/delete/files/rm/regex/2019/07/20/how-to-remove-files-using-regex.html</guid>
        
        
        <category>linux</category>
        
        <category>remove</category>
        
        <category>delete</category>
        
        <category>files</category>
        
        <category>rm</category>
        
        <category>regex</category>
        
      </item>
    
  </channel>
</rss>
